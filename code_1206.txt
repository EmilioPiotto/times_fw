---------------------------------------------------------------------------
data_preprocessing_service.py

import numpy as np
from sklearn.preprocessing import MinMaxScaler
import torch

class DataProcessingService:
    def __init__(self, seq_length:int = 10,pred_window:int = 1, batch_size:int = 10):
        """
        pred_window: (prediction window) how many periods ahead will be forcasted
        """
        self.seq_length = seq_length
        self.batch_size = batch_size
        self.pred_window = pred_window

    def normalize_data(self, data):
        scaler = MinMaxScaler(feature_range=(-1, 1))
        data_normalized = scaler.fit_transform(data.reshape(-1, 1))
        return data_normalized, scaler

    def create_sequences(self, data):
        xs, ys = [], []
        for i in range(len(data) - self.seq_length - self.pred_window + 1):
            s = i + self.seq_length
            x = data[i:s]
            y = data[s:s + self.pred_window]
            xs.append(x)
            ys.append(y)
        return np.array(xs), np.array(ys)

    def split_data(self, x_data, y_data, train_ratio=0.8):
        train_size = int(len(x_data) * train_ratio)
        x_train, x_test = x_data[:train_size], x_data[train_size:]
        y_train, y_test = y_data[:train_size], y_data[train_size:]
        return x_train, x_test, y_train, y_test

    @staticmethod
    def get_sample_data(length):
        # Linear data with some noise
        start = torch.rand(1).item()
        step = torch.rand(1).item()
        var = step*4

        array = torch.arange(start, start + step * length, step)
        random_values = torch.FloatTensor(length).uniform_(-var, var)

        return array + random_values


----------------------------------------------------------------------------------------
model_service.py
import torch
import torch.nn as nn
import torch.optim as optim
import os
from hyperopt import hp, fmin, tpe, Trials, STATUS_OK
from hyperopt.pyll.base import scope
import wandb
from dotenv import load_dotenv


class ModelService(nn.Module):
    def __init__(self):
        super(ModelService, self).__init__()

    def forward(self, x):
        raise NotImplementedError("Subclasses should implement this!")

    def train_loop(self, model, criterion, optimizer, x_train, y_train, epochs, directory="backend/checkpoints/test_", checkpoint_path_to_resume="", wandb_project = None):
        start_epoch = 0
        if checkpoint_path_to_resume and os.path.exists(checkpoint_path_to_resume):
            start_epoch, best_loss = self._resume_training(checkpoint_path_to_resume, model, optimizer)

        if wandb_project:
            # self._wandb_login()
            wandb.init(
                        project=wandb_project,
                        config={
                        "learning_rate": optimizer.param_groups[0]['lr'],
                        "architecture": str(model.__class__).split('.')[-1].strip("'>"),
                        "dataset": "CIFAR-100",
                        "epochs": epochs,
                        "optimizer": str(optimizer.__class__).split('.')[-1].strip("'>"),
                        "criterion": str(criterion.__class__).split('.')[-1].strip("'>")
                        }
                    )

        x_train = model.reshape_input(x_train)
        for epoch in range(start_epoch, epochs):
            model.train()
            total_loss = self._train_epoch(model, criterion, optimizer, x_train, y_train)

            average_loss = total_loss / len(x_train)

            if wandb_project:
                wandb.log({"average_loss": average_loss})
            print(f'Epoch [{epoch + 1}/{epochs}], Loss: {average_loss:.4f}')

            if (epoch + 1) % 5 == 0:
                self._save_checkpoint(directory, epoch, model, optimizer, average_loss)

        if wandb_project:
            wandb.finish()
        return average_loss

    def evaluation(self, model, x_test, y_test, criterion):
        model.eval()
        total_loss = 0.0
        x_test = model.reshape_input(x_test)

        with torch.no_grad():
            for i in range(len(x_test)):
                output = model(x_test[i])
                loss = criterion(output, y_test[i])
                total_loss += loss.item()

        average_loss = total_loss / len(x_test)
        print(f'Test Loss: {average_loss:.4f}')
        return average_loss

    @staticmethod
    def reshape_input(s):
        raise NotImplementedError("Subclasses should implement this!")

    @staticmethod
    def register(model, name: str, path: str = "backend/models/"):
        full_path = os.path.join(path, name)
        try:
            torch.save(model, full_path)
            print("Model saved successfully.")
        except Exception as e:
            print(f"Error saving the entire model: {e}")

    @staticmethod
    def load_registered_model(path):
        try:
            loaded_model = torch.load(path)
            loaded_model.eval()
            print("Model loaded successfully.")
            return loaded_model
        except Exception as e:
            print(f"Error loading the entire model: {e}")

    @staticmethod
    def hyperparameter_optimization(model_class, x_train, y_train, x_val, y_val, model_params_space, max_evals=20):
        def objective(params):
            model = model_class(**params['model_params'])
            criterion = nn.MSELoss()  # Example criterion, modify as needed
            optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])

            # Training loop
            model_service = ModelService()
            model_service.train_loop(model, criterion, optimizer, x_train, y_train, params['epochs'])

            # Evaluation
            val_loss = model_service.evaluation(model, x_val, y_val, criterion)
            return {'loss': val_loss, 'status': STATUS_OK}

        search_space = {
            'model_params': model_params_space,
            'learning_rate': hp.loguniform('learning_rate', -5, 0),
            'epochs': scope.int(hp.quniform('epochs', 5, 20, 1))
        }

        trials = Trials()
        best = fmin(fn=objective, space=search_space, algo=tpe.suggest, max_evals=max_evals, trials=trials)
        print(best)
        return best

    def _resume_training(self, checkpoint_path, model, optimizer):
        checkpoint = torch.load(checkpoint_path)
        model.load_state_dict(checkpoint['model_state_dict'])
        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
        start_epoch = checkpoint['epoch']
        best_loss = checkpoint['loss']
        print(f"Resuming training from epoch {start_epoch}, Loss: {best_loss:.4f}")
        return start_epoch, best_loss

    def _train_epoch(self, model, criterion, optimizer, x_train, y_train):
        total_loss = 0.0
        for i in range(len(x_train)):
            optimizer.zero_grad()
            output = model(x_train[i])
            loss = criterion(output, y_train[i])
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        return total_loss

    def _save_checkpoint(self, directory, epoch, model, optimizer, average_loss):
        checkpoint_path = f'{directory}{epoch + 1}.pth'
        torch.save({
            'epoch': epoch + 1,
            'model_state_dict': model.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
            'loss': average_loss
        }, checkpoint_path)
        print(f"Checkpoint saved at {checkpoint_path}")

    @staticmethod
    def wandb_login():
        if wandb.run is not None:
            print("There is an active connection to wandb")
        else:
            load_dotenv()
            wandb_api_key = os.getenv("WANDB_API_KEY")
            wandb.login(key=wandb_api_key)


    #############################################################
    # INSTERT METHOD TO DO INFERENCE WITH CONFIDENCE INTERVALS  #
    #############################################################
    def predict_with_confidence_intervals(self, model, x, num_samples=100, alpha=0.05, noise_level=0.01):
        """
        Performs prediction with confidence intervals by adding noise to the input data.

        Args:
            model: The trained model.
            x: The input data for prediction.
            num_samples: Number of samples to draw for estimating confidence interval. (default: 100)
            alpha: Significance level for the confidence interval. (default: 0.05)
            noise_level: The standard deviation of the Gaussian noise to be added to the input data.

        Returns:
            A tuple containing the predicted values and the confidence interval bounds.
        """
        model.eval()
        x = self.reshape_input(x)
        
        predictions = torch.zeros(num_samples, x.shape[0])
        with torch.no_grad():
            for i in range(num_samples):
                noisy_input = x + torch.randn_like(x) * noise_level
                for j in range(noisy_input.shape[0]):
                    predictions[i, j] = model(noisy_input[j])

        predicted_mean = predictions.mean(dim=0)
        prediction_std = predictions.std(dim=0)

        # Calculate confidence interval bounds
        confidence_interval_half_width = prediction_std * 1.96  # For a 95% confidence interval
        lower_bound = predicted_mean - confidence_interval_half_width
        upper_bound = predicted_mean + confidence_interval_half_width

        return predicted_mean, lower_bound, upper_bound


class SimpleNN(ModelService):
    def __init__(self, input_size, hidden_size, output_size):
        super(SimpleNN, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

    @staticmethod
    def reshape_input(s):
        return s.permute(0, 2, 1)


class SimpleLSTM(ModelService):
    def __init__(self, input_size, hidden_size, output_size):
        super(SimpleLSTM, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        lstm_out, _ = self.lstm(x)
        output = self.fc(lstm_out[:, -1, :])  # Take the output from the last time step
        return output

    @staticmethod
    def reshape_input(s):
        return s.unsqueeze(1)


class LinRegNN(ModelService):
    def __init__(self, input_size, output_size):
        super(LinRegNN, self).__init__()
        self.fc = nn.Linear(input_size, output_size)

    def forward(self, x):
        x = self.fc(x)
        return x

    @staticmethod
    def reshape_input(s):
        return s.permute(0, 2, 1)
    

---------------------------------------------------------------------------
example_template:test.ipynb
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from backend.data_processing_service import DataProcessingService
from backend.model_service import ModelService, LinRegNN

#CONFIG
log_wandb = False

# Initialize DataProcessingService
data_processor = DataProcessingService(seq_length=10, pred_window=1, batch_size=10)
data = np.loadtxt('data/normalized_apple_prices.csv')
# data = data_processor.get_sample_data(length=50)

# Normalize the data
data_normalized, scaler = data_processor.normalize_data(data)

# Create sequences
x_data, y_data = data_processor.create_sequences(data_normalized)

# Split data into training and test sets
x_train, x_test, y_train, y_test = data_processor.split_data(x_data, y_data, train_ratio=0.8)

# Convert data to PyTorch tensors
x_train = torch.tensor(x_train, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.float32)
x_test = torch.tensor(x_test, dtype=torch.float32)
y_test = torch.tensor(y_test, dtype=torch.float32)

ms = ModelService()


# Initialize the model with best hyperparameters
model = LinRegNN(data_processor.seq_length, data_processor.pred_window)

# Define loss function and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=best_hyperparams['learning_rate'])

# Training loop
if log_wandb:
    ms = ModelService.wandb_login()
    model.train_loop(model, criterion, optimizer, x_train, y_train, epochs=best_epochs, directory = "backend/checkpoints/lr01_", wandb_project="times_fw")
if not log_wandb:
    model.train_loop(model, criterion, optimizer, x_train, y_train, epochs=best_epochs, directory = "backend/checkpoints/lr01_")
    
# Eval
model.evaluation(model, x_test, y_test, criterion)

###############################################################
# INSTERT CODE TO CREATE INFERENCE WITH CONFIDENCE INTERVALS  #
###############################################################


import matplotlib.pyplot as plt
x_indices = np.arange(len(x_new))
plt.figure(figsize=(10, 6))
plt.plot(x_indices, predicted_mean.numpy(), label='Predicted Mean', color='b')
plt.fill_between(x_indices, lower_bound.numpy(), upper_bound.numpy(), color='r', alpha=0.3, label='95% Confidence Interval')
plt.title('Predictions with Confidence Intervals')
plt.xlabel('Sample Index')
plt.ylabel('Predicted Value')
plt.legend()
plt.show()